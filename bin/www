#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/server/app-server'),
	debug = require('debug')('Slide:server'),
	http = require('http'),
	WebSocket = require('ws'),
	// WebSocketServer = require('websocket').server,
	// Get port from environment and store in Express.
	port = normalizePort(process.env.PORT || '3000'),
	wsServerPort = 1337;

app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app),
	// wsServer = new WebSocketServer({
	// 	httpServer: server
	// });
	wss = new WebSocket.Server({ port: wsServerPort });

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// require('../src/server/websocket')(wsServer);
require('../src/server/websocket')(wss);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;

		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;

		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address(),
		bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

	debug('Listening on ' + bind);
}
